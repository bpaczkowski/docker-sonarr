#!/usr/bin/nodejs
const exec = require('child_process').exec;

// Options
const subCacheDir = '/config/sub-cache';
const pathEnvName = 'sonarr_episodefile_path';
const maxTries = ('SUB_MAX_TRIES' in process.env) ? parseInt(process.env.SUB_MAX_TRIES, 10) : 5;
// Options end
const subliminalOutputRegex = /([0-9]*) video collected[\s\S]*Downloaded ([0-9]*) subtitle/;

console.log('env: ', JSON.stringify(process.env));

if (!('SUB_LANGUAGES' in process.env) || !('SUB_PROVIDERS' in process.env) || !(pathEnvName in process.env)) {
  return;
}

const languages = process.env.SUB_LANGUAGES.split(',').map(v => '-l ' + v).join(' ');
const providers = process.env.SUB_PROVIDERS.split(',').map(v => '-p ' + v).join(' ');

const cmd = `subliminal --cache-dir ${subCacheDir} download ${languages} ${providers} "${process.env[pathEnvName]}"`;

console.log(`executing: ${cmd}`);

exec(cmd, (err, stdout, stderr) => {
  if (err || stderr) {
    return console.log(err || stderr);
  }

  const results = subliminalOutputRegex.exec(stdout);

  if (results.length !== 3 || isNaN(results[1]) || isNaN(results[2])) {
    return;
  }

  const videosFound = parseInt(results[1], 10);
  const subtitlesDownloaded = parseInt(results[2], 10);

  if (videosFound !== subtitlesDownloaded) {
    const timesRun = (process.argv.length > 2 && !isNaN(process.argv[2])) ? parseInt(process.argv[2], 10) : 1;

    if (timesRun >= maxTries) {
      return;
    }

    const delay = Math.pow(2, timesRun);
    exec(`at now + ${delay} hours <<< "${__filename} ${timesRun + 1}"`, { shell: '/bin/bash' });
  }
});
